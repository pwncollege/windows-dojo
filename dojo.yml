id: windows-warzone
name: "Windows Warzone"
type: public
award:
  emoji: ðŸªŸ
modules:
- id: windows-crash-course
  name: Windows Crash Course
  description: |
    Learning to work in a new operating system is like learning to walk for the first time again.  Start your journey by revisiting early concepts in a new guise.

    Note: This dojo is *slowly* being developed, including iterating on infrastructure support.  Functionality is subject to change!
  image: pwncollege/windows

  challenges:
  - id: level-1
    name: level1
    description: Smoke Test - start windows VM - Run the challenge in `C:\challenge\`
  - id: level-2
    name: level2
    description: Straightforward Buffer Overflow
  - id: level-3
    name: level3
    description: BOF with ASLR enabled
  - id: level-4
    name: level4
    description: What if win is in a DLL?
  - id: level-5
    name: level5
    description: Call a WriteFile in shellcode
  - id: level-6
    name: level6
    description: Find and call WriteFile
  - id: level-7
    name: level7
    description: Now get the flag yourself.
  - id: babywin-cookiemonster-1
    name: Cookie Monster 1
    description: The cookie monster is hungry for flags.  Can you feed it?
  resources:
    - name: "Applying Existing Knowledge"
      type: lecture
      slides: 1JVfle0cQaW0oJCVNWfssGgK1eexJjsHnDdCrgPsGtlQ
      video: Kvkz6lrxMn8
      playlist: PL-ymxv0nOtqptQV4CrmrtcZ6_jrnVGXi5
    - name: "Office Hours - Adam - 2024.03.11"
      type: lecture
      video: O3eZFriKXXk
      playlist: PL-ymxv0nOtqr7zM7ZBREoWa-eeSaKFJQd
    - name: "Office Hours - Robert - 2024.03.15"
      type: lecture
      video: wAUWkf4Xia4
      playlist: PL-ymxv0nOtqr7zM7ZBREoWa-eeSaKFJQd
    - name: "Class - Robert - 2024.03.19"
      type: lecture
      video: p91ddQbbNMo
      playlist: PL-ymxv0nOtqr7zM7ZBREoWa-eeSaKFJQd
    - name: "Windows on the Dojo - Getting Started Instructions"
      type: markdown
      content: |
        To get started:
          - Launch the challenge and enter the normal linux environment.
          - Use the `windows` command in the linux environment to `start`, `stop`, or `connect` to a Windows virtual machine.  The VM may take a few moments to start.
          - The Windows desktop gui is accessible over the web at [https://pwn.college/workspace/desktop-windows](https://pwn.college/workspace/desktop-windows).

        Obtaining the flag:
          - The challenge is located in `C:\challenge\`
          - The flag is located at C:\flag, but the hacker user cannot access it, even from the challenge binary!
          - The flag can be accessed by a "flag service" running on the windows machine.
          - The "flag service" will communicate the flag over a pipe located at `\\.\pipe\LOCAL\FlagPipe`.
          - The "flag service" will only communicate the flag to the challenge binary located at `C:\challenge\`.

        Other details:
          - Starting the VM from a practice environment will grant you administrator privileges on the windows machine.  You may need to "log out" and "log in" again before the windows environment acknowledges this.
          - Your linux home directory is accessible via the Windows Z drive.  It is recommended to use this to transfer files between the two environments rather than relying on the Z drive directly.
          - The challenge binary is located at `C:\challenge` in Windows and /challenge in Linux.
          - DO NOT RUN THE CHALLENGE FILE LOCATED AT `Y:`.  This binary cannot obtain the flag and is an implementation detail.

        Use the windows VM in practice mode to leverage the installed tools and develop your exploit.

        In order to obtain the flag, run your exploit **inside the windows environment** targeting challenge binary located in `C:\challenge\`.
- id: injection-and-hijacking
  name: Injection and Hijacking
  description: |
      While Windows has many concepts familiar to those seen in Windows, the win32 API and windows security model is quite different and allows for scenarios uncommon in Linux.  This module will explore some classic Windows injection and hijacking techniques that allow code to be executed in the context of another process, such as DLL injection, process hollowing, and thread hijacking.  As an added twist, a rudimentary Endpoint Detection and Response (EDR) system will be used to detect and block these techniques.  Can you bypass the EDR and execute your code in the context of another process?

      Note: This dojo is *slowly* being developed, including iterating on infrastructure support.  Functionality is subject to change!
  image: pwncollege/windows

  challenges:
  - id: the-humble-calculator
    name: The Humble Calculator
    description: No tricks here, just a simple calculator.  Can you obtain the flag?
  - id: hello-world
    name: Hello World
    description: A simple hello world program.  Can you obtain the flag?
  - id: alloc-for-what
    name: Alloc For What?
    description: Some virtual allocations are suspect and will result in process termination by the EDR. Can you obtain the flag?
  - id: alloc-for-what-2
    name: Alloc For What? 2
    description: Some virtual allocations are suspect and will result in process termination by the EDR. Can you obtain the flag?
    visibility:
        start: "2025-04-16T17:30:00-07:00"
  - id: how-to-open-a-file
    name: How to open a File
    description: Some file names are suspect and will result in process termination by the EDR. Can you obtain the flag?
    visibility:
        start: "2025-04-16T17:30:00-07:00"
  - id: how-to-open-a-file-2
    name: How to open a File 2
    description: Some file names are suspect and will result in process termination by the EDR. Can you obtain the flag?
    visibility:
        start: "2025-04-16T17:30:00-07:00"
  - id: how-to-open-a-file-3
    name: How to open a File 3
    description: Some file names are suspect and will result in process termination by the EDR. Can you obtain the flag?
    visibility:
        start: "2025-04-16T17:30:00-07:00"
  - id: how-to-open-a-file-4
    name: How to open a File 4
    description: Some file names are suspect and will result in process termination by the EDR. Can you obtain the flag?
    visibility:
        start: "2025-04-16T17:30:00-07:00"
  - id: how-to-open-a-file-5
    name: How to open a File 5
    description: Some file names are suspect and will result in process termination by the EDR. Can you obtain the flag?
    visibility:
        start: "2026-05-24T00:00:00-07:00"

  resources:
  - name: "Class Livestream - Windows Security Model - 2025.03.26"
    type: lecture
    slides: 1hb5guHSmSIOohZ8nDvy7vckckYuAzZnDtKTesc2YzoU
    video: hmfYzdg0I9A
    playlist: PL-ymxv0nOtqoqSMi6euNpzHQkRT8HCgxE
  - name: "Class Livestream - Injeciton and Hooking - 2025.04.02"
    type: lecture
    slides: 1pXCKs4jwNzSKgf_KzDw1K1q_De4h3u9oxnd7T_O7PRQ
    video: oIvnaODvbwo
    playlist: PL-ymxv0nOtqoqSMi6euNpzHQkRT8HCgxE
  - name: "Class Livestream - More Windows - 2025.04.16"
    type: lecture
    video: bfyIiuMA4us
    playlist: PL-ymxv0nOtqoqSMi6euNpzHQkRT8HCgxE
  - name: "The Robdefender EDR"
    type: markdown
    content: |
      Shortly into this series of challenges, our custom EDR, "robdefender" will start up inside the window VM.  Over the course of many challenges, robdefender will be updated to detect and block various techniques.  The EDR is not perfect, and there are many ways to bypass it.  The EDR implmentation resides in `C:\challenge\RD` as an implementation detail.  The "rd_rules.txt" can provide some insight as to what hooks are enabled.

      ROBDEFENDER IS NOT THE INTENDED TARGET FOR THESE CHALLENGES!  The running challenge process is where you should focus.

      Fair Warning: It is not recommended to spend time understanding the EDR implementation and it is subject to change without notice.
